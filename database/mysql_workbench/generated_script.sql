-- MySQL Script generated by MySQL Workbench
-- ven. 24 mars 2023 12:53:43
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema github_backup
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema github_backup
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `github_backup` ;
USE `github_backup` ;

-- -----------------------------------------------------
-- Table `github_backup`.`Owner`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `github_backup`.`Owner` (
  `idOwner` INT NOT NULL,
  `login` BLOB NULL,
  `node_id` BLOB NULL,
  `avatar_url` BLOB NULL,
  `gravatar_id` BLOB NULL,
  `url` BLOB NULL,
  `html_url` BLOB NULL,
  `followers_url` BLOB NULL,
  `following_url` BLOB NULL,
  `gists_url` BLOB NULL,
  `starred_url` BLOB NULL,
  `subscriptions_url` BLOB NULL,
  `organizations_url` BLOB NULL,
  `repos_url` BLOB NULL,
  `events_url` BLOB NULL,
  `received_events_url` BLOB NULL,
  `type` BLOB NULL,
  `site_admin` TINYINT NULL,
  PRIMARY KEY (`idOwner`))
ENGINE = InnoDB
COMMENT = 'owner of git repo';


-- -----------------------------------------------------
-- Table `github_backup`.`License`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `github_backup`.`License` (
  `key` BLOB NOT NULL,
  `name` BLOB NULL,
  `spdx_id` BLOB NULL,
  `url` BLOB NULL,
  `node_id` BLOB NULL,
  PRIMARY KEY (`key`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `github_backup`.`Repo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `github_backup`.`Repo` (
  `idRepo` INT NOT NULL,
  `node_id` BLOB NULL,
  `name` BLOB NULL,
  `full_name` BLOB NULL,
  `private` TINYINT NULL,
  `html_url` BLOB NULL,
  `description` BLOB NULL,
  `fork` TINYINT NULL,
  `url` BLOB NULL,
  `forks_url` BLOB NULL,
  `keys_url` BLOB NULL,
  `collaborators_url` BLOB NULL,
  `teams_url` BLOB NULL,
  `hooks_url` BLOB NULL,
  `issue_events_url` BLOB NULL,
  `events_url` BLOB NULL,
  `assignees_url` BLOB NULL,
  `branches_url` BLOB NULL,
  `tags_url` BLOB NULL,
  `blobs_url` BLOB NULL,
  `git_tags_url` BLOB NULL,
  `git_refs_url` BLOB NULL,
  `trees_url` BLOB NULL,
  `statuses_url` BLOB NULL,
  `languages_url` BLOB NULL,
  `stargazers_url` BLOB NULL,
  `contributors_url` BLOB NULL,
  `subscribers_url` BLOB NULL,
  `subscription_url` BLOB NULL,
  `commits_url` BLOB NULL,
  `git_commits_url` BLOB NULL,
  `comments_url` BLOB NULL,
  `issue_comment_url` BLOB NULL,
  `contents_url` BLOB NULL,
  `compare_url` BLOB NULL,
  `merges_url` BLOB NULL,
  `archive_url` BLOB NULL,
  `downloads_url` BLOB NULL,
  `issues_url` BLOB NULL,
  `pulls_url` BLOB NULL,
  `milestones_url` BLOB NULL,
  `notifications_url` BLOB NULL,
  `labels_url` BLOB NULL,
  `releases_url` BLOB NULL,
  `deployments_url` BLOB NULL,
  `created_at` DATE NULL,
  `updated_at` DATE NULL,
  `pushed_at` DATE NULL,
  `git_url` BLOB NULL,
  `ssh_url` BLOB NULL,
  `clone_url` BLOB NULL,
  `svn_url` BLOB NULL,
  `homepage` BLOB NULL,
  `size` INT NULL,
  `stargazers_count` INT NULL,
  `watchers_count` INT NULL,
  `language` BLOB NULL,
  `has_issues` TINYINT NULL,
  `has_projects` TINYINT NULL,
  `has_downloads` TINYINT NULL,
  `has_wiki` TINYINT NULL,
  `has_pages` TINYINT NULL,
  `has_discussions` TINYINT NULL,
  `forks_count` INT NULL,
  `mirror_url` BLOB NULL,
  `archived` TINYINT NULL,
  `disabled` TINYINT NULL,
  `open_issues_count` INT NULL,
  `allow_forking` TINYINT NULL,
  `is_template` TINYINT NULL,
  `web_commit_signoff_required` TINYINT NULL,
  `visibility` BLOB NULL,
  `forks` TINYINT NULL,
  `open_issues` TINYINT NULL,
  `watchers` TINYINT NULL,
  `default_branch` BLOB NULL,
  `permission_admin` BLOB NULL,
  `permission_maintain` BLOB NULL,
  `permission_push` BLOB NULL,
  `permission_triage` BLOB NULL,
  `permission_pull` BLOB NULL,
  `score` FLOAT NULL,
  `License_key` BLOB NULL,
  `Owner_idOwner` INT NULL,
  PRIMARY KEY (`idRepo`, `License_key`, `Owner_idOwner`),
  INDEX `fk_Repo_License1_idx` (`License_key` ASC) VISIBLE,
  INDEX `fk_Repo_Owner1_idx` (`Owner_idOwner` ASC) VISIBLE,
  CONSTRAINT `fk_Repo_License1`
    FOREIGN KEY (`License_key`)
    REFERENCES `github_backup`.`License` (`key`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Repo_Owner1`
    FOREIGN KEY (`Owner_idOwner`)
    REFERENCES `github_backup`.`Owner` (`idOwner`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `github_backup`.`Topics`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `github_backup`.`Topics` (
  `name` BLOB NOT NULL,
  PRIMARY KEY (`name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `github_backup`.`Topics_has_Repo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `github_backup`.`Topics_has_Repo` (
  `Topics_name` BLOB NOT NULL,
  `Repo_idRepo` INT NOT NULL,
  PRIMARY KEY (`Topics_name`, `Repo_idRepo`),
  INDEX `fk_Topics_has_Repo_Repo1_idx` (`Repo_idRepo` ASC) VISIBLE,
  INDEX `fk_Topics_has_Repo_Topics1_idx` (`Topics_name` ASC) VISIBLE,
  CONSTRAINT `fk_Topics_has_Repo_Topics1`
    FOREIGN KEY (`Topics_name`)
    REFERENCES `github_backup`.`Topics` (`name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Topics_has_Repo_Repo1`
    FOREIGN KEY (`Repo_idRepo`)
    REFERENCES `github_backup`.`Repo` (`idRepo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
